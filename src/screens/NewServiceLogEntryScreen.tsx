import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  Alert,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import {
  TextInput,
  Button,
  Card,
  Title,
  HelperText,
  Switch,
  Chip,
  SegmentedButtons,
  IconButton,
} from 'react-native-paper';
import { ServiceLogEntry, ServiceCase } from '../types';
import { serviceLogStorage, serviceCaseStorage } from '../services/storage';
import { COLORS, SERVICE_LOG_TYPES, SERVICE_LOG_ICONS, SERVICE_LOG_COLORS } from '../constants';
import { SearchableDropdown } from '../components/SearchableDropdown';
import { ImagePickerComponent } from '../components/ImagePicker';

interface NewServiceLogEntryScreenProps {
  navigation: any;
  route: any;
}

export const NewServiceLogEntryScreen: React.FC<NewServiceLogEntryScreenProps> = ({ navigation, route }) => {
  const { serviceCaseId, prefillData } = route.params;
  const [loading, setLoading] = useState(false);
  const [serviceCase, setServiceCase] = useState<ServiceCase | null>(null);
  const [formData, setFormData] = useState({
    title: prefillData?.title || '',
    type: 'note' as keyof typeof SERVICE_LOG_TYPES,
    content: prefillData?.content || '',
    location: '',
    tags: [] as string[],
    isImportant: false,
    images: [] as string[],
  });
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [newTag, setNewTag] = useState('');

  useEffect(() => {
    loadServiceCase();
  }, [serviceCaseId]);

  const loadServiceCase = async () => {
    try {
      const serviceCaseData = await serviceCaseStorage.getById(serviceCaseId);
      if (!serviceCaseData) {
        Alert.alert('Fel', 'Kunde inte hitta serviceärendet');
        navigation.goBack();
        return;
      }
      setServiceCase(serviceCaseData);
    } catch (error) {
      console.error('Error loading service case:', error);
      Alert.alert('Fel', 'Kunde inte ladda serviceärendet');
    }
  };

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!formData.title.trim()) {
      newErrors.title = 'Titel krävs';
    }

    if (!formData.content.trim()) {
      newErrors.content = 'Innehåll krävs';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSave = async () => {
    if (!validateForm()) {
      return;
    }

    setLoading(true);
    try {
      const newEntry: ServiceLogEntry = {
        id: '', // Will be generated by storage
        serviceCaseId: serviceCaseId,
        title: formData.title.trim(),
        type: formData.type,
        content: formData.content.trim(),
        location: formData.location.trim() || undefined,
        tags: formData.tags.length > 0 ? formData.tags : undefined,
        isImportant: formData.isImportant,
        images: formData.images.length > 0 ? formData.images : undefined,
        timestamp: new Date(),
      };

      await serviceLogStorage.save(newEntry);
      
      Alert.alert(
        'Framgång',
        'Loggpost har lagts till',
        [
          {
            text: 'OK',
            onPress: () => navigation.goBack(),
          },
        ]
      );
    } catch (error) {
      console.error('Error saving log entry:', error);
      Alert.alert('Fel', 'Kunde inte spara loggposten');
    } finally {
      setLoading(false);
    }
  };

  const getTypeOptions = () => {
    return Object.entries(SERVICE_LOG_TYPES).map(([key, value]) => ({
      id: key,
      label: value,
    }));
  };

  const updateFormData = (field: string, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const addTag = () => {
    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {
      updateFormData('tags', [...formData.tags, newTag.trim()]);
      setNewTag('');
    }
  };

  const removeTag = (tagToRemove: string) => {
    updateFormData('tags', formData.tags.filter(tag => tag !== tagToRemove));
  };

  const getCurrentLocation = () => {
    // TODO: Implement GPS location
    return 'Huvudentré, Våning 1';
  };

  const handleUseCurrentLocation = () => {
    const location = getCurrentLocation();
    updateFormData('location', location);
  };

  return (
    <SafeAreaView style={styles.container} edges={['top']}>
      <KeyboardAvoidingView
        style={styles.keyboardAvoidingView}
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      >
        <ScrollView
          style={styles.scrollView}
          contentContainerStyle={styles.scrollContent}
          showsVerticalScrollIndicator={false}
        >
          {serviceCase && (
            <Card style={styles.serviceCaseCard}>
              <Card.Content>
                <Text style={styles.serviceCaseLabel}>Serviceärende</Text>
                <Text style={styles.serviceCaseTitle}>{serviceCase.title}</Text>
                <Text style={styles.serviceCaseStatus}>
                  Status: {serviceCase.status} • Prioritet: {serviceCase.priority}
                </Text>
              </Card.Content>
            </Card>
          )}

          <Card style={styles.card}>
            <Card.Content>
              <Title style={styles.title}>Ny loggpost</Title>
              
              <View style={styles.formSection}>
                <TextInput
                  label="Titel *"
                  value={formData.title}
                  onChangeText={(text) => updateFormData('title', text)}
                  style={styles.input}
                  mode="outlined"
                  error={!!errors.title}
                  placeholder="t.ex. Batteri kontrollerat, Del bytt"
                />
                <HelperText type="error" visible={!!errors.title}>
                  {errors.title}
                </HelperText>
              </View>

              <View style={styles.formSection}>
                <Text style={styles.sectionLabel}>Typ</Text>
                <SearchableDropdown
                  label="Typ"
                  placeholder="Välj typ"
                  value={formData.type}
                  onValueChange={(value) => updateFormData('type', value as keyof typeof SERVICE_LOG_TYPES)}
                  data={Object.entries(SERVICE_LOG_TYPES).map(([key, value]) => ({ id: key, name: value }))}
                  getLabel={(item) => item.name}
                  getValue={(item) => item.id}
                />
              </View>

              <View style={styles.formSection}>
                <TextInput
                  label="Beskrivning *"
                  value={formData.content}
                  onChangeText={(text) => updateFormData('content', text)}
                  style={styles.input}
                  mode="outlined"
                  multiline
                  numberOfLines={4}
                  error={!!errors.content}
                  placeholder="Beskriv vad du har gjort, vad du hittade, mätningar, etc."
                />
                <HelperText type="error" visible={!!errors.content}>
                  {errors.content}
                </HelperText>
              </View>

              <View style={styles.formSection}>
                <ImagePickerComponent
                  images={formData.images}
                  onImagesChange={(images) => updateFormData('images', images)}
                  maxImages={10}
                  title="Bilder"
                />
              </View>

              <View style={styles.formSection}>
                <View style={styles.locationHeader}>
                  <Text style={styles.sectionLabel}>Plats</Text>
                  <Button
                    mode="text"
                    onPress={handleUseCurrentLocation}
                    compact
                    style={styles.locationButton}
                  >
                    Använd nuvarande
                  </Button>
                </View>
                <TextInput
                  label="Plats (valfritt)"
                  value={formData.location}
                  onChangeText={(text) => updateFormData('location', text)}
                  style={styles.input}
                  mode="outlined"
                  placeholder="t.ex. Akutmottagning, Våning 2"
                />
              </View>

              <View style={styles.formSection}>
                <Text style={styles.sectionLabel}>Taggar</Text>
                <View style={styles.tagInputContainer}>
                  <TextInput
                    label="Lägg till tagg"
                    value={newTag}
                    onChangeText={setNewTag}
                    style={[styles.input, styles.tagInput]}
                    mode="outlined"
                    placeholder="t.ex. batteri, broms, hjul"
                    onSubmitEditing={addTag}
                  />
                  <IconButton
                    icon="plus"
                    size={20}
                    onPress={addTag}
                    disabled={!newTag.trim()}
                    style={styles.addTagButton}
                  />
                </View>
                
                {formData.tags.length > 0 && (
                  <View style={styles.tagsContainer}>
                    {formData.tags.map((tag, index) => (
                      <Chip
                        key={index}
                        onClose={() => removeTag(tag)}
                        style={styles.tagChip}
                        textStyle={styles.tagText}
                      >
                        {tag}
                      </Chip>
                    ))}
                  </View>
                )}
              </View>

              <View style={styles.switchSection}>
                <View style={styles.switchRow}>
                  <Text style={styles.switchLabel}>Viktig post</Text>
                  <Switch
                    value={formData.isImportant}
                    onValueChange={(value) => updateFormData('isImportant', value)}
                    color={COLORS.accent}
                  />
                </View>
                <HelperText type="info">
                  Viktiga poster markeras med en stjärna
                </HelperText>
              </View>
            </Card.Content>
          </Card>

          <View style={styles.buttonContainer}>
            <Button
              mode="contained"
              onPress={handleSave}
              loading={loading}
              disabled={loading}
              style={styles.saveButton}
              contentStyle={styles.buttonContent}
            >
              Lägg till loggpost
            </Button>
            
            <Button
              mode="outlined"
              onPress={() => navigation.goBack()}
              disabled={loading}
              style={styles.cancelButton}
              contentStyle={styles.buttonContent}
            >
              Avbryt
            </Button>
          </View>
        </ScrollView>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.background,
  },
  keyboardAvoidingView: {
    flex: 1,
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    padding: 16,
    paddingBottom: 32,
  },
  serviceCaseCard: {
    marginBottom: 16,
    backgroundColor: COLORS.surfaceSecondary,
  },
  serviceCaseLabel: {
    fontSize: 12,
    color: COLORS.textTertiary,
    fontWeight: '600',
    textTransform: 'uppercase',
    letterSpacing: 0.5,
    marginBottom: 4,
  },
  serviceCaseTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: COLORS.text,
    marginBottom: 4,
  },
  serviceCaseStatus: {
    fontSize: 14,
    color: COLORS.textSecondary,
  },
  card: {
    backgroundColor: COLORS.surface,
    borderRadius: 12,
    marginBottom: 16,
  },
  title: {
    fontSize: 24,
    fontWeight: '600',
    color: COLORS.text,
    marginBottom: 24,
    textAlign: 'center',
  },
  formSection: {
    marginBottom: 20,
  },
  sectionLabel: {
    fontSize: 16,
    fontWeight: '500',
    color: COLORS.text,
    marginBottom: 8,
  },
  input: {
    backgroundColor: COLORS.surface,
  },
  locationHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  locationButton: {
    margin: 0,
  },
  tagInputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  tagInput: {
    flex: 1,
    marginRight: 8,
  },
  addTagButton: {
    margin: 0,
  },
  tagsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginTop: 8,
  },
  tagChip: {
    marginRight: 8,
    marginBottom: 4,
    backgroundColor: COLORS.primary,
  },
  tagText: {
    color: 'white',
    fontSize: 12,
  },
  switchSection: {
    marginBottom: 16,
  },
  switchRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 4,
  },
  switchLabel: {
    fontSize: 16,
    color: COLORS.text,
    fontWeight: '500',
  },
  buttonContainer: {
    gap: 12,
  },
  saveButton: {
    backgroundColor: COLORS.primary,
    borderRadius: 8,
  },
  cancelButton: {
    borderColor: COLORS.border,
    borderRadius: 8,
  },
  buttonContent: {
    paddingVertical: 8,
  },
}); 